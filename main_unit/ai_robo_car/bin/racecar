#!/usr/bin/env python3
"""
This is a test

Usage:
  main start [<ipc_secret>] [--address=<ipc_address>] [--port=<ipc_port>] [--frequency=<heart_frequency>] [--fork]
  main pause [<ipc_secret>] [--address=<ipc_address>] [--port=<ipc_port>]
  main resume [<ipc_secret>] [--address=<ipc_address>] [--port=<ipc_port>]
  main stop [<ipc_secret>] [--address=<ipc_address>] [--port=<ipc_port>]
  main (-h | --help)

Options:
  -h --help                       Show this screen.
  --address=<ipc_address>         Address to which the ipc connects [default: localhost].
  --port=<ipc_port>               Port to which the ipc connects [default: 6789].
  --frequency=<heart_frequency>   Frequency at which the logic loop runs [default: 30].
  --fork                          Forks the process shortly before really starting the services [default: False].

"""
from multiprocessing.connection import Client
from typing import Union

import logging
from docopt import docopt

from ai_robo_car.layer import ObjectRecognizer, RelativeTranslator, PathFinder, PathTranslator, EngineCommunicator
from ai_robo_car.layer.test_layer import PrintTestLayer
from ai_robo_car.layer_management import RemoteControlCommand, RemoteControlMessage, build_and_start_env
from tests.engine_communicator_test import EngineCommunicatorServer


def build_layers():
    object_recognizer = ObjectRecognizer(None, None)
    relative_translator = RelativeTranslator(None, None, camera_height=0.012, camera_position_angle=80,
                                             camera_x_view_angle=150, camera_y_view_angle=94)
    path_finder = PathFinder(None, None)
    path_translator = PathTranslator(None, None)
    engine_communicator_server = EngineCommunicatorServer(-1)
    engine_communicator_server.start()
    engine_communicator = EngineCommunicator(None, None, True)
    #engine_communicator = EngineCommunicator(None, None, False)

    object_recognizer.lower = relative_translator
    relative_translator.lower = path_finder
    relative_translator.upper = object_recognizer
    path_finder.lower = path_translator
    path_finder.upper = relative_translator
    path_translator.lower = engine_communicator
    path_translator.upper = path_finder
    engine_communicator.upper = path_translator

    return object_recognizer


def encode_ipc_secret(ipc_secret: str) -> Union[bytes, None]:
    encoded_ipc_secret = None
    if ipc_secret is not None:
        encoded_ipc_secret = ipc_secret.encode()

    return encoded_ipc_secret


def setup_logger():
    root_logger = logging.getLogger()

    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    stream_handler = logging.StreamHandler()
    stream_handler.setLevel(logging.DEBUG)
    stream_handler.setFormatter(formatter)

    root_logger.setLevel(logging.DEBUG)
    root_logger.addHandler(stream_handler)


def start_server(ipc_secret: str, heart_frequency: float = 30,
                 ipc_address: str = "localhost", ipc_port: int = 6789):
    setup_logger()
    highest_layer = build_layers()
    build_and_start_env(
        highest_layer=highest_layer,
        frequency=heart_frequency,
        ipc_secret=encode_ipc_secret(ipc_secret),
        ipc_address=(ipc_address, ipc_port))


def communicate_with_server(ipc_secret: str, ipc_address: str, ipc_port: int, command: RemoteControlCommand):
    with Client((ipc_address, ipc_port), authkey=encode_ipc_secret(ipc_secret)) as conn:
        conn.send(RemoteControlMessage(command))
        conn.close()


if __name__ == "__main__":
    arguments = docopt(__doc__)
    if arguments["start"]:
        start_server(
            ipc_secret=arguments["<ipc_secret>"],
            heart_frequency=float(arguments["--frequency"]),
            ipc_address=arguments["--address"],
            ipc_port=int(arguments["--port"]))
    elif arguments["pause"]:
        communicate_with_server(
            ipc_secret=arguments["<ipc_secret>"],
            ipc_address=arguments["--address"],
            ipc_port=int(arguments["--port"]),
            command=RemoteControlCommand.PAUSE
        )
    elif arguments["resume"]:
        communicate_with_server(
            ipc_secret=arguments["<ipc_secret>"],
            ipc_address=arguments["--address"],
            ipc_port=int(arguments["--port"]),
            command=RemoteControlCommand.RESUME
        )
    elif arguments["stop"]:
        communicate_with_server(
            ipc_secret=arguments["<ipc_secret>"],
            ipc_address=arguments["--address"],
            ipc_port=int(arguments["--port"]),
            command=RemoteControlCommand.SHUTDOWN
        )
